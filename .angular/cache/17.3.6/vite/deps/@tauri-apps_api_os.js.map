{
  "version": 3,
  "sources": ["../../../../../node_modules/@tauri-apps/api/os.js"],
  "sourcesContent": ["import { isWindows } from './helpers/os-check.js';\nimport { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides operating system-related utility methods and properties.\n *\n * This package is also accessible with `window.__TAURI__.os` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.os`](https://tauri.app/v1/api/config/#allowlistconfig.os) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"os\": {\n *         \"all\": true, // enable all Os APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * The operating system-specific end-of-line marker.\n * - `\\n` on POSIX\n * - `\\r\\n` on Windows\n *\n * @since 1.0.0\n * */\nconst EOL = isWindows() ? '\\r\\n' : '\\n';\n/**\n * Returns a string identifying the operating system platform.\n * The value is set at compile time. Possible values are `'linux'`, `'darwin'`, `'ios'`, `'freebsd'`, `'dragonfly'`, `'netbsd'`, `'openbsd'`, `'solaris'`, `'android'`, `'win32'`\n * @example\n * ```typescript\n * import { platform } from '@tauri-apps/api/os';\n * const platformName = await platform();\n * ```\n *\n * @since 1.0.0\n *\n */\nasync function platform() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'platform'\n        }\n    });\n}\n/**\n * Returns a string identifying the kernel version.\n * @example\n * ```typescript\n * import { version } from '@tauri-apps/api/os';\n * const osVersion = await version();\n * ```\n *\n * @since 1.0.0\n */\nasync function version() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'version'\n        }\n    });\n}\n/**\n * Returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\n * @example\n * ```typescript\n * import { type } from '@tauri-apps/api/os';\n * const osType = await type();\n * ```\n *\n * @since 1.0.0\n */\nasync function type() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'osType'\n        }\n    });\n}\n/**\n * Returns the operating system CPU architecture for which the tauri app was compiled.\n * Possible values are `'x86'`, `'x86_64'`, `'arm'`, `'aarch64'`, `'mips'`, `'mips64'`, `'powerpc'`, `'powerpc64'`, `'riscv64'`, `'s390x'`, `'sparc64'`.\n * @example\n * ```typescript\n * import { arch } from '@tauri-apps/api/os';\n * const archName = await arch();\n * ```\n *\n * @since 1.0.0\n */\nasync function arch() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'arch'\n        }\n    });\n}\n/**\n * Returns the operating system's default directory for temporary files as a string.\n * @example\n * ```typescript\n * import { tempdir } from '@tauri-apps/api/os';\n * const tempdirPath = await tempdir();\n * ```\n *\n * @since 1.0.0\n */\nasync function tempdir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'tempdir'\n        }\n    });\n}\n/**\n * Returns a String with a `BCP-47` language tag inside. If the locale couldnâ€™t be obtained, `null` is returned instead.\n * @example\n * ```typescript\n * import { locale } from '@tauri-apps/api/os';\n * const locale = await locale();\n * if (locale) {\n *    // use the locale string here\n * }\n * ```\n *\n * @since 1.4.0\n */\nasync function locale() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'locale'\n        }\n    });\n}\n\nexport { EOL, arch, locale, platform, tempdir, type, version };\n"],
  "mappings": ";;;;;;;;;;AAiCA,IAAM,MAAM,UAAU,IAAI,SAAS;AAanC,SAAe,WAAW;AAAA;AACtB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAWA,SAAe,UAAU;AAAA;AACrB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAWA,SAAe,OAAO;AAAA;AAClB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAYA,SAAe,OAAO;AAAA;AAClB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAWA,SAAe,UAAU;AAAA;AACrB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAcA,SAAe,SAAS;AAAA;AACpB,WAAO,mBAAmB;AAAA,MACtB,eAAe;AAAA,MACf,SAAS;AAAA,QACL,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;",
  "names": []
}
